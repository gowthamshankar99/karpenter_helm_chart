# Chart.yaml
apiVersion: v2
name: karpenter-config
description: A Helm chart for Karpenter NodePool and EC2NodeClass
version: 0.1.0

# values.yaml
clusterName: ""
amdAmiId: ""
armAmiId: ""
# gpuAmiId: ""
nodePoolName: "default"
ec2NodeClassName: "default"
karpenterNodeRole: ""

# templates/nodepool.yaml
---
apiVersion: karpenter.sh/v1
kind: NodePool
metadata:
  name: {{ .Values.nodePoolName }}
spec:
  template:
    spec:
      requirements:
        - key: kubernetes.io/arch
          operator: In
          values: ["amd64"]
        - key: kubernetes.io/os
          operator: In
          values: ["linux"]
        - key: karpenter.sh/capacity-type
          operator: In
          values: ["on-demand"]
        - key: karpenter.k8s.aws/instance-category
          operator: In
          values: ["c", "m", "r"]
        - key: karpenter.k8s.aws/instance-generation
          operator: Gt
          values: ["2"]
      nodeClassRef:
        group: karpenter.k8s.aws
        kind: EC2NodeClass
        name: {{ .Values.ec2NodeClassName }}
      expireAfter: 720h # 30 * 24h = 720h
  limits:
    cpu: 1000
  disruption:
    consolidationPolicy: WhenEmptyOrUnderutilized
    consolidateAfter: 1m

# templates/ec2nodeclass.yaml
---
apiVersion: karpenter.k8s.aws/v1
kind: EC2NodeClass
metadata:
  name: {{ .Values.ec2NodeClassName }}
spec:
  amiFamily: AL2 # Amazon Linux 2
  role: "{{ .Values.karpenterNodeRole }}-{{ .Values.clusterName }}"
  subnetSelectorTerms:
    - tags:
        karpenter.sh/discovery: "{{ .Values.clusterName }}"
  securityGroupSelectorTerms:
    - tags:
        karpenter.sh/discovery: "{{ .Values.clusterName }}"
  amiSelectorTerms:
    - id: "{{ .Values.armAmiId }}"
    - id: "{{ .Values.amdAmiId }}"
